Events
In order to notify your application about events in the WhatsApp API, you can use Webhooks and Websockets.

👉 See the list of all available events in the Events section.

🌟 You can observe Events in real-time using 📊 Dashboard - Event Monitor!

Webhooks
Webhooks
Webhooks are a way for two different applications to communicate with each other in real-time. When a certain event happens in one application, it sends a message to another application through a webhook URL. The receiving application can then take action based on the information received.

Session webhooks
You can define webhooks configuration per session when you start it with POST /api/sessions/ request data.

Here’s a simple example:


{
  "name": "default",
  "config": {
    "webhooks": [
      {
        "url": "https://webhook.site/11111111-1111-1111-1111-11111111",
        "events": [
          "message"
        ]
      }
    ]
  }
}
Here’s available configuration options for webhooks


{
  "name": "default",
  "config": {
    "webhooks": [
      {
        "url": "https://webhook.site/11111111-1111-1111-1111-11111111",
        "events": [
          "message"
        ],
        "hmac": {
          "key": "your-secret-key"
        },
        "retries": {
          "policy": "constant",
          "delaySeconds": 2,
          "attempts": 15
        },
        "customHeaders": [
          {
            "name": "X-My-Custom-Header",
            "value": "Value"
          }
        ]
      }
    ]
  }
}
Global webhooks
There’s a way how you can configure 🔄 Webhooks for all sessions at once - by settings these environment variables:

WHATSAPP_HOOK_URL=https://webhook.site/11111111-1111-1111-1111-11111111 - to set up a URL for the webhook
WHATSAPP_HOOK_EVENTS=message,message.any,state.change - specify events.
WHATSAPP_HOOK_EVENTS=* - subscribe to all events.
We don’t suggest using * or all events for production, it can generate a lot of requests.
WHATSAPP_HOOK_HMAC_KEY=your-secret-key - the same as hmac.key field in the webhook configuration.
WHATSAPP_HOOK_RETRIES_POLICY=linear - the same as retries.policy field in the webhook configuration.
WHATSAPP_HOOK_RETRIES_DELAY_SECONDS=2 - the same as retries.delaySeconds field in the webhook configuration.
WHATSAPP_HOOK_RETRIES_ATTEMPTS=4
WHATSAPP_HOOK_CUSTOM_HEADERS=X-My-Custom-Header-1:Value;X-My-Custom-Header-2:Value - the same as customHeaders field in the webhook configuration.
Use Header:Value format and separate them by ;.
That webhook configuration does not appear in session.config field in GET /api/sessions/ request.

💡 You can open https://webhook.site and paste URL from it to url field, and you’ll see all requests immediately in your browser to intercept the webhook’s payload.

Retries
You can configure retry policy for webhooks by settings config.retries structure when POST /api/sessions/:


{
  "name": "default",
  "config": {
    "webhooks": [
      {
        "url": "https://webhook.site/11111111-1111-1111-1111-11111111",
        "events": [
          "message"
        ],
        "retries": {
          "policy": "constant",
          "delaySeconds": 2,
          "attempts": 15
        }
      }
    ]
  }
}
Possible policy:

constant - retry with the same delay between attempts (2, 2, 2, 2)
linear - retry with linear backoff (2, 4, 6, 8)
exponential - retry with exponential backoff with 20% jitter (2, 4.1, 8.4, 16.3).
Headers
When you receive a webhook request to your API endpoint, you’ll get those headers:

X-Webhook-Request-Id - unique request id for each webhook request.
X-Webhook-Timestamp - Unix timestamp in milliseconds when the webhook was sent.
If you’re using HMAC authentication you’ll get two additional headers:

X-Webhook-Hmac - message authentication code for the raw body in HTTP POST request that send to your endpoint.
X-Webhook-Hmac-Algorithm - sha512 - algorithm that have been used to create X-Webhook-Hmac value.
You can send any customer headers by defining config.webhooks.customHeaders fields this way:


{
  "name": "default",
  "config": {
    "webhooks": [
      {
        "url": "https://webhook.site/11111111-1111-1111-1111-11111111",
        "events": [
          "message"
        ],
        "customHeaders": [
          {
            "name": "X-My-Custom-Header",
            "value": "Value"
          }
        ]
      }
    ]
  }
}
HMAC authentication
You can authenticate webhook sender by using HMAC Authentication.

Define you secret key in config.hmac.key field when you start session with POST /api/sessions/:

{
  "name": "default",
  "config": {
    "webhooks": [
      {
        "url": "https://webhook.site/11111111-1111-1111-1111-11111111",
        "events": [
          "message"
        ],
        "hmac": {
          "key": "your-secret-key"
        }
      }
    ]
  }
}
After that you’ll receive all webhooks payload with two additional headers:
X-Webhook-Hmac - message authentication code for the raw body in HTTP POST request that send to your endpoint.
X-Webhook-Hmac-Algorithm - sha512 - algorithm that have been used to create X-Webhook-Hmac value.
Implement the authentication algorithm by hashing body and using secret key and then verifying it with X-Webhook-Hmac value. Please check your implementation here ->
Here’s example for

# Full body
{"event":"message","session":"default","engine":"WEBJS"}
# Secret key
my-secret-key
# X-Webhook-Hmac-Algorithm
sha512
# X-Webhook-Hmac
208f8a55dde9e05519e898b10b89bf0d0b3b0fdf11fdbf09b6b90476301b98d8097c462b2b17a6ce93b6b47a136cf2e78a33a63f6752c2c1631777076153fa89
Examples
Here’s few examples of how to handle webhook in different languages:

Python guide
Do you use another language?

Please create a short guide how to handle webhook and send message after you finish your setup! You can create a pull request with your favorite language in the GitHub, in examples folder ->.

Websockets
You can use Websockets to receive messages in real-time!

Install websocat first.


# Listen all sessions and events
# -E to end the connection when the server closes it
websocat -E ws://localhost:3000/ws

# Use secure (SSL/HTTPS) connection - add wss://
websocat -E wss://localhost:3000/ws

# Add your API key
websocat -E ws://localhost:3000/ws?x-api-key=123

# Listen all sessions and events
websocat -E ws://localhost:3000/ws?session=*&events=*

# Listen certain events
websocat -E ws://localhost:3000/ws?session=*&events=session.status&events=message

# If you want to see the logs and ping the server every 10 seconds
websocat -v --ping-interval=10 -E ws://localhost:3000/ws

# Listen certain session
websocat -E ws://localhost:3000/ws?session=default&events=session.status

# With API Key
websocat -E ws://localhost:3000/ws?x-api-key=123
Parameters:

session - session name, * for all sessions
events - list of events, * for all events
events=* doesn’t include engine.event. You need to specify events=*&events=engine.event if you want to listen all events
x-api-key - your API key
Examples
JavaScript

// Configuration
const apiKey = '123'; // Replace with your API key
const baseUrl = 'ws://localhost:3000/ws';
const session = '*'; // Use '*' to listen to all sessions
const events = ['session.status', 'message']; // List of events to listen to

// Construct the WebSocket URL with query parameters
const queryParams = new URLSearchParams({
    'x-api-key': apiKey,
    session,
    ...events.reduce((acc, event) => ({ ...acc, events: event }), {}) // Add multiple 'events' params
});
const wsUrl = `${baseUrl}?${queryParams.toString()}`;

// Initialize WebSocket connection
const socket = new WebSocket(wsUrl);

// Handle incoming messages
socket.onmessage = (event) => {
    console.log('Received:', event.data);
};

// Handle errors
socket.onerror = (error) => {
    console.error('WebSocket Error:', error);
};

// Handle connection open
socket.onopen = () => {
    console.log('WebSocket connection established:', wsUrl);
};

// Handle connection close
socket.onclose = () => {
    console.log('WebSocket connection closed');
};
Event Payload
Structure
In Webhooks or Websockets you’ll receive the following payload:


{
  // lower case ULID - https://github.com/ulid/spec
  "id": "evt_1111111111111111111111111111",
  // timestamp in milliseconds
  "timestamp": 1741249702485,
  // event name
  "event": "message",
  // session name
  "session": "default",
  // 'metadata' provided when you created the session
  "metadata": {
    "user.id": "123",
    "user.email": "email@example.com"
  },
  // me - your own contact, if authenticated and WORKING
  "me": {
    "id": "71111111111@c.us",
    "pushName": "~"
  },
  "payload": {
    ... // event specific data
  },
  "environment": {
    "tier": "PLUS",
    "version": "2023.10.12"
  },
  "engine": "WEBJS"
}
Metadata
You can provide additional metadata when you start the session with Start Session request data.

message

{
  "event": "message",
  "session": "default",
  // 'metadata' provided when you created the session
  "metadata": {
    "user.id": "123",
    "user.email": "email@example.com"
  },
  ...
}
You’ll receive the same metadata in the webhook payload.

Events
Here’s the list of features that are available by 🏭 Engines:

🖥️ Sessions - Events
Events	WEBJS	NOWEB	GOWS
session.status	✔️	✔️	✔️
engine.event	✔️	✔️	✔️
state.change	✔️	✔️	✔️
📤 Messages - Events
Events	WEBJS	NOWEB	GOWS
message	✔️	✔️	✔️
message.reaction	✔️	✔️	✔️
message.any	✔️	✔️	✔️
message.ack	✔️	✔️	✔️
message.waiting	✔️
message.edited	✔️	✔️	✔️
message.revoked	✔️	✔️	✔️
💬 Chats - Events
Events	WEBJS	NOWEB	GOWS
chat.archive	✔️
👥 Groups - Events
Events	WEBJS	NOWEB	GOWS
group.v2.join	✔️	✔️	✔️
group.v2.leave	✔️	✔️	✔️
group.v2.participants	✔️	✔️	✔️
group.v2.update	✔️	✔️	✔️
group.join	✔️	✔️
group.leave	✔️
🏷️ Labels - Events
Events	WEBJS	NOWEB	GOWS
label.upsert		✔️	✔️
label.deleted		✔️	✔️
label.chat.added		✔️	✔️
label.chat.deleted		✔️	✔️
✅ Presence - Events
Events	WEBJS	NOWEB	GOWS
presence.update	✔️	✔️	✔️
📶 Polls - Events
Events	WEBJS	NOWEB	GOWS
poll.vote		✔️	✔️
poll.vote.failed		✔️	✔️
📞 Calls - Events
Events	WEBJS	NOWEB	GOWS
call.received	✔️	✔️
call.accepted		✔️
call.rejected		✔️

message
Incoming message (text/audio/files)

message

{
  "event": "message",
  "session": "default",
  "engine": "WEBJS",
  "payload": {
    "id": "true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
    "timestamp": 1667561485,
    "from": "11111111111@c.us",
    "fromMe": true,
    "source": "app",
    "to": "11111111111@c.us",
    "body": "Hi there!",
    "hasMedia": false,
    "ack": 1,
    "vCards": [],
    "_data": {
        ...
    }
  }
}
Fields:

hasMedia: true | false - indicates if the message has media attached
media.url: http://localhost:8000/... - the URL to download the media
_data - internal engine data, can be different for each engine
source: app|api - can be api for message.any event if you send a message via WAHA API. Otherwise, it’s app.
It’s possible to have hasMedia: true, but media: null - it means WAHA didn’t download media due to configuration.

message.any
Fired on all message creations, including your own. The payload is the same as for message event.

message.any

  "event": "message.any",
  "session": "default",
  "engine": "WEBJS",
  "payload": {
    ...
  }
}
Fields:

source: app|api - can be api for message.any event if you send a message via WAHA API. Otherwise, it’s app.
message.reaction
Receive events when a message is reacted to by a user (or yourself reacting to a message).

payload.reaction.text - emoji that was used to react to the message. It’ll be an empty string if the reaction was removed.
payload.reaction.messageId - id of the message that was reacted to.
message.reaction

{
    "event": "message.reaction",
    "session": "default",
    "me": {
        "id": "79222222222@c.us",
        "pushName": "WAHA"
    },
    "payload": {
        "id": "false_79111111@c.us_11111111111111111111111111111111",
        "from": "79111111@c.us",
        "fromMe": false,
        "participant": "79111111@c.us",
        "to": "79111111@c.us",
        "timestamp": 1710481111.853,
        "reaction": {
            "text": "🙏",
            "messageId": "true_79111111@c.us_11111111111111111111111111111111"
        }
    },
    "engine": "WEBJS",
    "environment": {
        "version": "2024.3.3",
        "engine": "WEBJS",
        "tier": "PLUS",
        "browser": "/usr/bin/google-chrome-stable"
    }
}
NOWEB engine note - reactions were sent in ‘message’ and ‘message.any’ events, not it’s available only in ‘message.reaction’!"

message.ack
Receive events when server or recipient gets the message, read or played it.

ackName field contains message status (ack has the same meaning, but show the value in int, but we keep it for backward compatability, they much to each other)

Possible message ack statuses:

ackName: ERROR, ack: -1 - error occurred
ackName: PENDING, ack: 0 - message is pending
ackName: SERVER, ack: 1 - message was sent to server
ackName: DEVICE, ack: 2 - message was sent to the device
ackName: READ, ack: 3 - recipient read message
ackName: PLAYED, ack: 4 - recipient played the message
The payload may have more fields, it depends on the engine you use, but here’s a minimum amount that all engines send:

message.ack

{
  "event": "message.ack",
  "session": "default",
  "engine": "WEBJS",
  "payload": {
    "id":"true_11111111111@c.us_4CC5EDD64BC22EBA6D639F2AF571346C",
    "from":"11111111111@c.us",
    "participant": null,
    "fromMe":true,
    "ack":3,
    "ackName":"READ"
  }
}
